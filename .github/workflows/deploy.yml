name: Auto Deploy to Aliyun Server

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Aliyun Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USER }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT }}
        script: |
          set -e  # 遇到任何错误立即退出
          set -o pipefail  # 管道命令中任何一个失败都会导致整个管道失败
          
          echo "========================================="
          echo "开始部署 Railway-PY 应用..."
          echo "当前用户: $(whoami)"
          echo "当前时间: $(date)"
          echo "========================================="
          
          # 检查Docker是否安装和运行
          echo "步骤1: 检查Docker状态..."
          if ! docker --version; then
            echo "❌ Docker未安装"
            exit 1
          fi
          
          if ! docker info > /dev/null 2>&1; then
            echo "❌ Docker服务未运行"
            exit 1
          fi
          echo "✅ Docker状态正常"
          
          # 进入部署目录
          echo "步骤2: 准备部署目录..."
          if ! cd /opt/railway-py 2>/dev/null; then
            echo "目录不存在，正在创建..."
            if ! mkdir -p /opt/railway-py; then
              echo "❌ 创建目录失败"
              exit 1
            fi
            if ! cd /opt/railway-py; then
              echo "❌ 进入目录失败"
              exit 1
            fi
          fi
          echo "✅ 当前目录: $(pwd)"
          
          # 获取代码
          echo "步骤3: 获取代码..."
          if [ ! -f "Dockerfile" ] || [ ! -f "requirements.txt" ]; then
            echo "正在下载代码..."
            # 清理可能存在的旧文件
            rm -rf * .git* 2>/dev/null || true
            
            # 下载代码zip文件
            if ! wget -O railway-py.zip https://codeload.github.com/maius28/railway-py/zip/refs/heads/master; then
              echo "❌ 代码下载失败"
              exit 1
            fi
            echo "✅ 代码下载成功"
            
            # 解压代码文件
            if ! unzip -q railway-py.zip; then
              echo "❌ 代码解压失败"
              exit 1
            fi
            echo "✅ 代码解压成功"
            
            # 移动文件到当前目录
            if ! mv railway-py-master/* . 2>/dev/null; then
              echo "❌ 文件移动失败"
              exit 1
            fi
            
            # 清理临时文件
            rm -rf railway-py.zip railway-py-master
            echo "✅ 代码部署成功"
          else
            echo "发现已存在的代码文件，正在更新..."
            # 清理现有文件
            rm -rf * .git* 2>/dev/null || true
            
            # 重新下载最新代码
            if ! wget -O railway-py.zip https://codeload.github.com/maius28/railway-py/zip/refs/heads/master; then
              echo "❌ 代码下载失败"
              exit 1
            fi
            
            if ! unzip -q railway-py.zip; then
              echo "❌ 代码解压失败"
              exit 1
            fi
            
            if ! mv railway-py-master/* . 2>/dev/null; then
              echo "❌ 文件移动失败"
              exit 1
            fi
            
            # 清理临时文件
            rm -rf railway-py.zip railway-py-master
            echo "✅ 代码更新成功"
          fi
          
          # 验证关键文件
          echo "步骤4: 验证关键文件..."
          if [ ! -f "Dockerfile" ]; then
            echo "❌ Dockerfile不存在"
            exit 1
          fi
          if [ ! -f "requirements.txt" ]; then
            echo "❌ requirements.txt不存在"
            exit 1
          fi
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ docker-compose.yml不存在"
            exit 1
          fi
          echo "✅ 关键文件验证通过"
          
          # 检查docker compose是否可用
          echo "步骤5: 检查docker compose..."
          if ! docker compose --version; then
            echo "❌ docker compose未安装"
            exit 1
          fi
          echo "✅ docker compose状态正常"
          
          # 停止现有服务
          echo "步骤6: 停止现有服务..."
          if docker compose ps -q | grep -q .; then
            echo "发现运行中的服务，正在停止..."
            if ! docker compose down; then
              echo "❌ 停止服务失败"
              exit 1
            fi
            echo "✅ 服务已停止"
          else
            echo "ℹ️ 没有运行中的服务"
          fi
          
          # 清理旧镜像（可选）
          echo "步骤7: 清理旧镜像..."
          if docker images -q railway-py_railway-py | grep -q .; then
            echo "发现旧镜像，正在删除..."
            if ! docker rmi railway-py_railway-py; then
              echo "⚠️ 删除旧镜像失败，继续部署"
            else
              echo "✅ 旧镜像已删除"
            fi
          else
            echo "ℹ️ 没有旧镜像需要删除"
          fi
          
          # 构建并启动服务
          echo "步骤8: 构建并启动服务..."
          if ! docker compose up -d --build; then
            echo "❌ 服务启动失败"
            echo "查看服务日志："
            docker compose logs
            exit 1
          fi
          echo "✅ 服务启动成功"
          
          # 等待服务启动
          echo "步骤9: 等待服务启动..."
          sleep 30
          
          # 检查服务状态
          echo "步骤10: 检查服务状态..."
          if ! docker compose ps | grep railway-py | grep -q "Up"; then
            echo "❌ railway-py服务未在运行状态"
            echo "服务日志："
            docker compose logs railway-py
            exit 1
          fi
          echo "✅ 服务运行正常"
          
          # 测试服务
          echo "步骤11: 测试服务..."
          MAX_ATTEMPTS=5
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "第 $i 次测试服务..."
            if curl -f http://localhost:8000/ping 2>/dev/null; then
              echo "✅ 服务响应正常"
              break
            else
              if [ $i -eq $MAX_ATTEMPTS ]; then
                echo "❌ 服务测试失败，已达到最大重试次数"
                echo "服务日志："
                docker compose logs railway-py
                exit 1
              else
                echo "⏳ 服务暂未响应，等待重试..."
                sleep 10
              fi
            fi
          done
          
          # 清理Docker系统
          echo "步骤12: 清理Docker系统..."
          if ! docker system prune -f; then
            echo "⚠️ Docker系统清理失败，但不影响部署"
          else
            echo "✅ Docker系统清理完成"
          fi
          
          echo "========================================="
          echo "🎉 部署成功完成！"
          echo "服务状态:"
          docker compose ps
          echo "railway-py服务日志（最后10行）:"
          docker compose logs --tail 10 railway-py
          echo "访问地址: http://服务器IP:8000"
          echo "API文档: http://服务器IP:8000/docs"
          echo "数据库地址: 服务器IP:3306"
          echo "========================================"
name: Auto Deploy to Aliyun Server

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Aliyun Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USER }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT }}
        script: |
          echo "开始部署 Railway-PY 应用..."
          
          # 进入部署目录
          cd /opt/railway-py || { echo "目录不存在，正在创建..."; mkdir -p /opt/railway-py; cd /opt/railway-py; }
          
          # 如果是第一次部署，克隆代码
          if [ ! -d ".git" ]; then
            echo "第一次部署，正在克隆代码..."
            git clone https://github.com/maius28/railway-py.git .
          else
            echo "更新代码..."
            git fetch origin
            git reset --hard origin/master
          fi
          
          # 停止并删除现有容器
          echo "停止现有容器..."
          docker stop railway-py 2>/dev/null || true
          docker rm railway-py 2>/dev/null || true
          
          # 删除旧镜像（可选，节省空间）
          echo "删除旧镜像..."
          docker rmi railway-py:latest 2>/dev/null || true
          
          # 构建新镜像
          echo "构建Docker镜像..."
          docker build -t railway-py:latest .
          
          # 运行新容器
          echo "启动新容器..."
          docker run -d \
            --name railway-py \
            --restart unless-stopped \
            -p 8000:8000 \
            railway-py:latest
          
          # 等待服务启动
          echo "等待服务启动..."
          sleep 10
          
          # 检查容器状态
          echo "检查容器状态..."
          docker ps | grep railway-py
          
          # 测试服务
          echo "测试服务..."
          curl -f http://localhost:8000/ping && echo "✅ 服务启动成功！" || echo "❌ 服务启动失败"
          
          # 清理Docker系统（可选）
          echo "清理Docker系统..."
          docker system prune -f
          
          echo "部署完成！"
